{"name":"Diskdb","tagline":"A disk-based json database for node","body":"# diskDB [![Build Status](https://secure.travis-ci.org/arvindr21/diskDB.png?branch=master)](https://travis-ci.org/arvindr21/diskDB) [![NPM version](https://badge-me.herokuapp.com/api/npm/diskDB.png)](http://badges.enytc.com/for/npm/diskDB) [![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/arvindr21/diskDB/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n[![NPM](https://nodei.co/npm/diskDB.png?downloads=true&stars=true)](https://nodei.co/npm/diskDB/)\r\n\r\nA Light Weight Disk based JSON Database with a MongoDB like API.\r\n\r\n_You will never know that you are interacting with a File System :grin:_\r\n\r\n## Getting Started\r\nInstall the module with: `npm install diskdb`\r\n\r\n```js\r\nvar db = require('diskdb');\r\ndb = db.connect('/path/to/db-folder', ['collection-name']);\r\n// you can access the traditional JSON DB methods here\r\n```\r\n\r\n## Documentation\r\n### Connect to DB\r\n```js\r\ndb.connect(pathToFolder, ['filename']);\r\n```\r\nFilename will be the name of the JSON file. You can omit the extenstuin, diskDB will take care of it for you.\r\n\r\n```js\r\nvar db = require('diskdb');\r\ndb = db.connect('/examples/db', ['articles']);\r\n// or simply\r\ndb.connect('/examples/db', ['articles']);\r\n```\r\n\r\nThis will check for a directory at given path, if it does not exits, diskDB will throw an error and exit. \r\n\r\nIf the directory exists but the file/collection does not exist, diskDB will create it for you. \r\n\r\n### Load Collections \r\nAlternatively you can also load collections like \r\n\r\n```js\r\nvar db = require('diskdb');\r\n// this\r\ndb = db.connect('/examples/db');\r\ndb.loadCollections(['articles']);\r\n//or\r\ndb.connect('/examples/db');\r\ndb.loadCollections(['articles']);\r\n//or\r\ndb.connect('/examples/db')\r\n  .loadCollections(['articles']);\r\n//or\r\ndb.connect('/examples/db', ['articles']);\r\n```\r\n\r\n### Write/Save to Collection\r\n```js\r\ndb.collectioName.save(object);\r\n```\r\nOnce you have created a collection, you can access the collection methods using the dot notation like\r\n\r\n```js\r\ndb.articles.[methodname]\r\n```\r\nTo save the data, you can use\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('db', ['articles']);\r\nvar article = {\r\n    title : \"diskDB rocks\",\r\n    published : \"today\",\r\n    rating : \"5 stars\"\r\n}\r\ndb.articles.save(article);\r\n```\r\nThe saved data will be \r\n```js\r\n[\r\n    {\r\n        \"title\": \"diskDB rocks\",\r\n        \"published\": \"today\",\r\n        \"rating\": \"5 stars\",\r\n        \"_id\": \"0f6047c6c69149f0be0c8f5943be91be\"\r\n    }\r\n]\r\n```\r\n\r\n### Read from Collection\r\nThere are 2 methods available for reading the JSON collection\r\n* db.collectioName.find(query)\r\n* db.collectioName.findOne(query)\r\n\r\n\r\n#### db.collectioName.find() \r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.find();\r\n```\r\nThis will return all the records\r\n```js\r\n[{ \r\n    title: 'diskDB rocks',\r\n    published: 'today',\r\n    rating: '5 stars',\r\n    _id: '0f6047c6c69149f0be0c8f5943be91be' \r\n}]\r\n```\r\nYou can also query with a criteria like\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.find({rating : \"5 stars\"});\r\n```\r\nThis will return all the articles who have a rating of 5.\r\n\r\n#### db.collectioName.findOne(query)\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.findOne();\r\n```\r\n\r\nIf you do not pass a query, diskDB will return the first article in the collection. If you pass a query, it will return first article in the filtered data\r\n\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.findOne({_id: '0f6047c6c69149f0be0c8f5943be91be'});\r\n```\r\n### Update Collection\r\n```js\r\ndb.collectioName.update(query, data, options);\r\n```\r\n\r\nYou can also update one or many objects in the collection\r\n```js\r\noptions = {\r\n    multi: false, // update multiple - default false\r\n    upsert: false // if object is not found, add it (update-insert) - default false\r\n}\r\n```\r\nUsage \r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\n\r\nvar query = {\r\n\ttitle : 'diskDB rocks'\r\n};\r\n\r\nvar dataToBeUpdate = {\r\n\ttitle : 'diskDB rocks again!',\r\n};\r\n\r\nvar options = {\r\n\t multi: false,\r\n\t upsert: false\r\n};\r\n\r\nvar updated = db.articles.update(query, dataToBeUpdate, options);\r\nconsole.log(updated); // { updated: 1, inserted: 0 }\r\n```\r\n\r\n### Remove Collection\r\n```js\r\ndb.collectioName.remove(query);\r\n```\r\nYou can remove the entire collection (including the file) or you can remove the matched objects by passing in a query.\r\n\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.remove({rating : \"5 stars\"});\r\n```\r\nWill remove only the matched objects, where as \r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.remove();\r\n```\r\nWill remove the file from folder.\r\n\r\n### Count\r\n```js\r\ndb.collectioName.count();\r\n```\r\nWill return the count of objects in the Collection\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.count(); // will give the count\r\n```\r\n\r\n## Examples\r\nRefer to the examples folder.\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n* 0.1.0\r\n  * Base Module with\r\n    * Connect to a Folder\r\n    * Access a Collection/File\r\n    * Create Read Update Delete on JSON object\r\n\r\n## License\r\nCopyright (c) 2014 Arvind Ravulavaru. Licensed under the MIT license.\r\n","google":"UA-47722912-1","note":"Don't delete this file! It's used internally to help with page regeneration."}